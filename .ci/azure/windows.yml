trigger:
  branches:
    include:
    - master
    - releases/*
  paths:
    exclude:
    - docs/*

resources:
  repositories:
  - repository: openvino_contrib
    type: github
    endpoint: openvinotoolkit
    name: openvinotoolkit/openvino_contrib

  - repository: testdata
    type: github
    endpoint: openvinotoolkit
    name: openvinotoolkit/testdata

jobs:
- job: Win
  # About 150% of total time
  timeoutInMinutes: 120

  pool:
    name: WIN_VMSS_VENV_F16S_WU2

  variables:
    system.debug: true
    VSTS_HTTP_RETRY: 5
    VSTS_HTTP_TIMEOUT: 200
    BUILD_TYPE: Release
    REPO_DIR: $(Build.Repository.LocalPath)
    OPENVINO_CONTRIB_REPO_DIR: $(REPO_DIR)\..\openvino_contrib
    MODELS_PATH: $(REPO_DIR)\..\testdata
    WORK_DIR: $(Pipeline.Workspace)\_w
    BUILD_DIR: D:\build
    BUILD_SAMPLES_DIR: D:\build_samples
    BIN_DIR: $(REPO_DIR)\bin\intel64
    MSVS_VARS_PATH: C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat
    MSVC_COMPILER_PATH: C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.24.28314\bin\Hostx64\x64\cl.exe
    INSTALL_DIR: $(WORK_DIR)\install_pkg
    SETUPVARS: $(INSTALL_DIR)\bin\setupvars.bat
    TEST_ENV_PATH: $(REPO_DIR)\inference-engine\temp\tbb\bin;$(REPO_DIR)\inference-engine\temp\opencv_4.5.2\opencv\bin;%PATH%

  steps:
  - script: |
      powershell -command "Invoke-RestMethod -Headers @{\"Metadata\"=\"true\"} -Method GET -Uri http://169.254.169.254/metadata/instance/compute?api-version=2019-06-01 | format-custom"
      where python3
      python3 --version
      where python
      python --version
      where java
      java -version
      wmic computersystem get TotalPhysicalMemory
      wmic cpu list
      wmic logicaldisk get description,name
      wmic VOLUME list
      set
    displayName: 'System info'

  - script: |
      rd /Q /S $(WORK_DIR) & mkdir $(WORK_DIR)
      rd /Q /S $(BUILD_DIR) & mkdir $(BUILD_DIR)
      rd /Q /S $(BUILD_SAMPLES_DIR) & mkdir $(BUILD_SAMPLES_DIR)
    displayName: 'Make dir'

  - checkout: self
    clean: true
    lfs: false
    submodules: recursive
    path: openvino

  - checkout: openvino_contrib
    clean: true
    lfs: false
    submodules: recursive
    path: openvino_contrib

  - checkout: testdata
    clean: true
    lfs: true
    path: testdata

  - script: |
      rem Speed up build
      certutil -urlcache -split -f https://github.com/ninja-build/ninja/releases/download/v1.10.2/ninja-win.zip ninja-win.zip
      powershell -command "Expand-Archive -Force ninja-win.zip"
      git clone https://github.com/google/gtest-parallel.git
    workingDirectory: $(WORK_DIR)
    displayName: 'Install dependencies'

  - script: |
      set PATH=$(WORK_DIR)\ninja-win;%PATH%
      call "$(MSVS_VARS_PATH)" && cmake -GNinja -DENABLE_FASTER_BUILD=ON -DENABLE_TEMPLATE_PLUGIN=ON -DCMAKE_BUILD_TYPE=$(BUILD_TYPE) -DENABLE_TESTS=ON -DENABLE_STRICT_DEPENDENCIES=OFF -DIE_EXTRA_MODULES=$(OPENVINO_CONTRIB_REPO_DIR)\modules -DCMAKE_C_COMPILER:PATH="$(MSVC_COMPILER_PATH)" -DCMAKE_CXX_COMPILER:PATH="$(MSVC_COMPILER_PATH)" $(REPO_DIR)
    workingDirectory: $(BUILD_DIR)
    displayName: 'CMake'

  - script: dir $(REPO_DIR)\inference-engine\temp\ /s
    displayName: 'List temp SDKs'

  - script: call "$(MSVS_VARS_PATH)" && $(WORK_DIR)\ninja-win\ninja
    workingDirectory: $(BUILD_DIR)
    displayName: 'Build Win'

  - script: dir $(REPO_DIR)\bin\ /s
    displayName: 'List bin files'

  - script: cmake -DCMAKE_INSTALL_PREFIX=$(INSTALL_DIR) -P cmake_install.cmake
    workingDirectory: $(BUILD_DIR)
    displayName: 'Install'

  - script: dir $(INSTALL_DIR) /s
    displayName: 'List install files'

  - script: $(INSTALL_DIR)\deployment_tools\inference_engine\samples\cpp\build_samples_msvc.bat
    workingDirectory: $(BUILD_SAMPLES_DIR)
    displayName: 'Build cpp samples'

  - script: $(INSTALL_DIR)\deployment_tools\inference_engine\samples\c\build_samples_msvc.bat
    workingDirectory: $(BUILD_SAMPLES_DIR)
    displayName: 'Build c samples'

  - script: rd /Q /S $(BUILD_DIR)
    displayName: 'Clean build dir'

  - script: |
      set PATH=$(TEST_ENV_PATH)
      $(BIN_DIR)\unit-test --gtest_print_time=1 --gtest_filter=-backend_api.config_unsupported:*IE_GPU* --gtest_output=xml:TEST-NGraphUT.xml
    displayName: 'nGraph UT'
    continueOnError: false

  - script: |
      set PATH=$(TEST_ENV_PATH)
      $(BIN_DIR)\InferenceEngineUnitTests.exe --gtest_output=xml:TEST-InferenceEngineUnitTests.xml
    displayName: 'IE UT old - IB'

  - script: |
      set PATH=$(TEST_ENV_PATH)
      $(BIN_DIR)\ieUnitTests --gtest_output=xml:TEST-ieUnitTests.xml
    displayName: 'IE UT'
    continueOnError: false

  - script: |
      set PATH=$(TEST_ENV_PATH)
      $(BIN_DIR)\cpuUnitTests --gtest_output=xml:TEST-cpuUnitTests.xml
    displayName: 'CPU UT'
    continueOnError: false

  - script: |
      set PATH=$(TEST_ENV_PATH)
      $(BIN_DIR)\gnaUnitTests --gtest_output=xml:TEST-gnaUnitTests.xml
    displayName: 'GNA UT'
    continueOnError: false

  - script: |
      set PATH=$(TEST_ENV_PATH)
      $(BIN_DIR)\vpuUnitTests --gtest_output=xml:TEST-vpuUnitTests.xml
    displayName: 'VPU UT'
    continueOnError: false

  - script: |
      set PATH=$(TEST_ENV_PATH)
      $(BIN_DIR)\onnxImporterUnitTests --gtest_output=xml:TEST-onnxImporterUnitTests.xml
    displayName: 'ONNX Importer UT'
    continueOnError: false

  - script: |
      set PATH=$(TEST_ENV_PATH)
      $(BIN_DIR)\ieFuncTests --gtest_output=xml:TEST-ieFuncTests.xml
    displayName: 'IE FuncTests'
    continueOnError: false

  - script: |
      set PATH=$(TEST_ENV_PATH)
      $(BIN_DIR)\templateFuncTests --gtest_output=xml:TEST-templateFuncTests.xml
    displayName: 'TEMPLATE FuncTests'
    continueOnError: false

  - script: |
      set PATH=$(TEST_ENV_PATH)
      $(BIN_DIR)\cpuFuncTests.exe --gtest_filter=*smoke* --gtest_output=xml:TEST-cpuFuncTests.xml
    displayName: 'CPU FuncTests'
    continueOnError: false

  - script: |
      set PATH=$(TEST_ENV_PATH)
      set DATA_PATH=$(MODELS_PATH)
      set MODELS_PATH=$(MODELS_PATH)
      $(BIN_DIR)\InferenceEngineCAPITests --gtest_output=xml:TEST-InferenceEngineCAPITests.xml
    displayName: 'IE CAPITests'
    continueOnError: false

  - task: PublishTestResults@2
    condition: always()
    inputs:
      testResultsFormat: 'JUnit' # Options: JUnit, NUnit, VSTest, xUnit, cTest
      testResultsFiles: '**/TEST-*.xml'
      #searchFolder: '$(BUILD_DIR)'
      mergeTestResults: false # Optional
      #failTaskOnFailedTests: false # Optional
      #testRunTitle: 'Pre/Post-Commit' # Optional
      buildPlatform: 'x64' # Optional
      buildConfiguration: 'Windows' # Optional
      #publishRunAttachments: true # Optional
